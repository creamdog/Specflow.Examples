// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace service.tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Webservices")]
    public partial class WebservicesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "example.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Webservices", "In order to know what is going on\r\nAs a developer\r\nI want to instantiate any arbi" +
                    "trary web service and invoke availible methods and assert their return values", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Weather")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void Weather()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Weather", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("webservice named Weather with the wsdl url http://ws.cdyne.com/WeatherWS/Weather." +
                    "asmx?wsdl");
#line 9
 testRunner.When("I call the method GetCityForecastByZIP with the parameter ZIP=36003");
#line 10
 testRunner.Then("I expect it to return an object matching content {City: \'Autaugaville\', WeatherSt" +
                    "ationCity: \'Selma\'}");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Speed")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void Speed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Speed", new string[] {
                        "mytag"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("webservice named ConvertSpeeds with the wsdl url http://www.webservicex.net/Conve" +
                    "rtSpeed.asmx?WSDL");
#line 15
 testRunner.When("I call the method ConvertSpeed with the parameters speed=100 and FromUnit=centime" +
                    "tersPersecond and ToUnit=feetPersecond");
#line 16
 testRunner.Then("I expect it to return the number 3.2808398950131235");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Whois")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void Whois()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Whois", new string[] {
                        "mytag"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("webservice named whois with the wsdl url http://www.webservicex.net/whois.asmx?WS" +
                    "DL");
#line 21
 testRunner.When("I call the method GetWhoIS with the parameters HostName=google.com");
#line 22
 testRunner.Then("I expect it to return a string containing TERMS OF USE: You are not authorized to" +
                    " access or query our Whois");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("country")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void Country()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("country", new string[] {
                        "mytag"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("webservice named country with the wsdl url http://www.webservicex.net/country.asm" +
                    "x?WSDL");
#line 27
 testRunner.When("I call the method GetCountries with no parameters");
#line 28
 testRunner.Then("I expect it to return html containing <NewDataSet><Table><Name>Kiribati</Name></T" +
                    "able><Table><Name>Cocos (Keeling) Islands</Name></Table></NewDataSet>");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GeoIPService")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void GeoIPService()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GeoIPService", new string[] {
                        "mytag"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("webservice named GeoIPService with the wsdl url http://www.webservicex.net/geoips" +
                    "ervice.asmx?WSDL");
#line 33
 testRunner.When("I call the method GetGeoIP with the parameters IPAddress=\'209.85.148.147\'");
#line 34
 testRunner.Then("I expect it to return an object matching content {IP:\'209.85.148.147\', CountryNam" +
                    "e:\'United States\', CountryCode:\'USA\'}");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BarCode")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void BarCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BarCode", new string[] {
                        "mytag"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("webservice named BarCode with the wsdl url http://www.webservicex.net/genericbarc" +
                    "ode.asmx?WSDL");
#line 39
 testRunner.When(@"I call the method GenerateBarCode with the parameters BarCodeText=123456 and BarCodeParam={Height:1,Width:1,Ratio:5,FontName:'Arial',FontSize:10,BarColor:'Black',BGColor:'White',barcodeOption:'Both', barcodeType: 'Code_2_5_interleaved', showTextPosition: 'BottomCenter', BarCodeImageFormat: 'PNG'}");
#line 40
 testRunner.Then(@"I expect it to return a base64 string matching iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAA1JREFUGFdjYGBg+A8AAQQBAHAgZQsAAAAASUVORK5CYIIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
